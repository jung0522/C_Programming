1-2
C프로그래밍 필기장

C언어의 기본 단위는 함수
모듈러 프로그래밍

출력값: return 값 

정의: Definition
호출: call
인자: parameter
전달: passing

stdio = standard input output 

#include <stdio.h>는 ;가 없다 -> C preprocessor directives는 C의 문장이 아니다. 
컴파일러 전에 C preprocessor directives를 먼저처리
ex) #이 붙어있는 inculde, definite

주석(Comment)

1-3
*연산자의 우선순위*
바이트 비트

변수, 기능 
정의: 어떤 값을 정해서 자리가 잡힌다. vs 선언

기계어 -> Assembly address
1. Symbolic address -> 주소값 ex) num1, num2
2. mnemonic instruction 

printf("%d\n", 3+4);
7
7의 메모리를 알 수가 없음 -> 변수 필요

= assignment
+ plus
- substract
* multi
/ divide
% modulus operation 정수 연산에만 쓰임.

정수형 7/3 -> 2
실수형 7.0/3.0 -> 2.3333 허용

Association 결합
Associativity 결합성

%를 출력하고 싶으면 "%%" -> %

복합 대입 연산자 Assignment operater
중요한거 +=임 =+가 아니라

0 과 1 교체 one comprement
+1   two comprement


실수 계산은 꼭 맞을 거라 생각 ㄴㄴ
3/1은 정확하게 표현 불가

float는 double의 2배

논리 연산자
&& AND
|| OR
!  NOT

비트 연산자
& AND
| OR
^  NOT

int num1 = 15; // byte byte byte 00001111 //

*비트 연산자 논리 연산자 구분
int num3 = num1 & num2 4
int num3 = num1 && num2 1

0001 0000 16
1110 1111 +1
1111 0000 -16
0000 1111 +1
0001 0000 16

char 숫자를 넣어도 됨

-128 이상 +127 이하
unsinged char 0 ~ 256

컴퓨터에서 소수점 있는 상수 > double로 인식
소수점 없는 상수 > int로 인식

정밀도 15자리 2의 15승까지 표현

     hex
'A' 41 0100 0001
'B' 42 0100 0010
'C' 43 0100 0011

%c 'A'
%d 65
%h 41

문자도 덧셈, 뺄셈 가능
A+32 > a

모든 연산은 컴파일 할 때 X
실행할 때 일어남

상수는 이름 없을 때 리터럴 상수
& : 주소값을 알 수 있는 
&상수 알 수 없음

float num1 = 5.789; // 경고 메시지 발생  double로 인식하기 때문에 //
5.789f 접미사 붙여서 말해줌

심볼릭 상수는 선언과 동시에 초기화 해줘야 함
WHy 나중에 값을 못 바꾸기 때문에

왼편을 기준으로 형 변환 발생 (Lvalue)

07 반복뮨
들여쓰기 indentation

반복문 실수로 쓰는 경우
1. 반복문 안 되게 하거나
2. 무한루프

반복문 중첩 3개면 프로그램 속도가 현저히 느려짐

내 머릿 속으로 코딩 dry running

Fibornacci number

continue 
증감식은 진행하고 conitnue로

prime number 소수

Switch
:붙게 되면 레이블
주소값을 알게 해주는 거

Switch 조건식에 정수가 와야함(문자도 숫자)
할 수는 있음
조건식 n%10





